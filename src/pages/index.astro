---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
---

<Layout title="Welcome to Astro.">
  <div class="grid grid-cols-5 gap-3">
    <my-draggable
      draggable="true"
      class="border border-gray-300 rounded bg-gray-900 p-3 cursor-move data-[dragging]:opacity-30 data-[over]:bg-red-200 transition-all"
    >
      A
    </my-draggable>
    <my-draggable
      draggable="true"
      class="border border-gray-300 rounded bg-gray-900 p-3 cursor-move data-[dragging]:opacity-30 data-[over]:bg-red-200 transition-all"
    >
      B
    </my-draggable>
    <my-draggable
      draggable="true"
      class="border border-gray-300 rounded bg-gray-900 p-3 cursor-move data-[dragging]:opacity-30 data-[over]:bg-red-200 transition-all"
    >
      C
    </my-draggable>
  </div>
</Layout>

<script>
  import { controller, targets, target, attr } from "@github/catalyst";

  @controller
  class MyDraggableElement extends HTMLElement {
    @attr dragging = false;
    @attr over = false;

    static draggingElement?: HTMLElement;

    connectedCallback() {
      this.addEventListener("dragstart", (e) => {
        this.dragging = true;

        if (!e.dataTransfer) return;
        e.dataTransfer.effectAllowed = "move";
        e.dataTransfer.setData("text/html", this.innerHTML);

        MyDraggableElement.draggingElement = this;
      });
      this.addEventListener("dragend", (e) => {
        this.dragging = false;
      });
      this.addEventListener("dragenter", (e) => {
        this.over = true;
      });
      this.addEventListener("dragleave", (e) => {
        this.over = false;
      });
      this.addEventListener("dragover", (e) => {
        e.preventDefault();
      });
      this.addEventListener("drop", (e) => {
        e.stopPropagation();

        if (!e.dataTransfer) return;
        const data = e.dataTransfer.getData("text/html");
        if (MyDraggableElement.draggingElement) {
          MyDraggableElement.draggingElement.innerHTML = this.innerHTML;
        }

        this.innerHTML = data;
        this.over = false;
      });
    }
  }
</script>
